# backend/app/main.py

from fastapi import FastAPI, HTTPException
from dotenv import load_dotenv                                           # ðŸ”§ Ensure we can load .env
import os
import logging                                                            # ðŸ”§ For logging exceptions
import stripe                                                             # ðŸ”§ Stripe SDK

from models import Location, PlanRequest, PaymentRequest                  # your Pydantic models
from ptv_client import plan_trip, get_nearby_vehicles                                          # your trip-planning function
from payment import process_payment                                       # your payment helper

# â”€â”€â”€ 0) Load environment â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
load_dotenv()                                                              # ðŸ”§ read .env from project root

# â”€â”€â”€ 1) Configure Stripe â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
stripe.api_key = os.getenv("STRIPE_API_KEY")                              # ðŸ”§ set Stripe key

# â”€â”€â”€ 2) Configure logging â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
logger = logging.getLogger("uvicorn.error")                                # ðŸ”§ use Uvicornâ€™s error logger

# â”€â”€â”€ 3) FastAPI app init â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
app = FastAPI(title="Melbourne Transport Companion")

# â”€â”€â”€ 4) Location endpoint â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@app.post("/location")
async def receive_location(loc: Location):
    # simply forward or store the location
    # e.g., await db.save_location(loc)
    return {"status": "received"}

# â”€â”€â”€ 5) Nearby vehicles â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@app.get("/vehicles")
async def vehicles(lat: float, lon: float):
    try:
        return await get_nearby_vehicles(lat, lon)
    except Exception as e:
        logger.error("Error in /vehicles", exc_info=e)                     # ðŸ”§ log full traceback
        raise HTTPException(status_code=500, detail="Failed to fetch vehicles")

# â”€â”€â”€ 6) Trip planning â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@app.post("/plan")
async def plan(req: PlanRequest):
    try:
        # ðŸ”§ unpack floats if your plan_trip signature expects lat/lon separately
        o_lat, o_lon = req.origin.lat, req.origin.lon
        d_lat, d_lon = req.destination.lat, req.destination.lon
        return await plan_trip(o_lat, o_lon, d_lat, d_lon)
    except HTTPException:
        # let FastAPI re-raise your own HTTPExceptions
        raise
    except Exception as e:
        logger.error("Error in /plan", exc_info=e)                          # ðŸ”§ log full traceback
        raise HTTPException(status_code=500, detail="Trip planning failed")

# â”€â”€â”€ 7) Payment processing â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@app.post("/payment")
async def payment(req: PaymentRequest):
    try:
        result = process_payment(req.trip_id, req.amount, req.token)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))